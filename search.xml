<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>butterfly 禁用头像旋转</title>
    <url>/2024/12/16/butterfly-%E7%A6%81%E7%94%A8%E5%A4%B4%E5%83%8F%E6%97%8B%E8%BD%AC/</url>
    <content><![CDATA[<p>当鼠标移到侧边栏头像上时，头像会播放旋转动效，要想禁用可以找到<br>themes\butterfly\source\css_layout\aside.styl文件并按照如下对transform: unset修改即可完成动效屏蔽。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.avatar-img</span></span><br><span class="line">  <span class="attribute">overflow</span>: hidden</span><br><span class="line">  margin: <span class="number">0</span> auto</span><br><span class="line">  width: <span class="number">110px</span></span><br><span class="line">  height: <span class="number">110px</span></span><br><span class="line">  border-radius: <span class="number">70px</span></span><br><span class="line"></span><br><span class="line">  img</span><br><span class="line">    width: <span class="number">100%</span></span><br><span class="line">    height: <span class="number">100%</span></span><br><span class="line">    transition: filter <span class="number">375ms</span> ease-in .<span class="number">2s</span>, transform .<span class="number">3s</span></span><br><span class="line">    object-fit: cover</span><br><span class="line"></span><br><span class="line">    &amp;:hover</span><br><span class="line">      transform: unset</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>butterfly</category>
      </categories>
      <tags>
        <tag>butterfly</tag>
      </tags>
  </entry>
  <entry>
    <title>git修改历史提交</title>
    <url>/2024/12/09/git%E4%BF%AE%E6%94%B9%E5%8E%86%E5%8F%B2%E6%8F%90%E4%BA%A4/</url>
    <content><![CDATA[<h1 id="git-reset命令"><a href="#git-reset命令" class="headerlink" title="git reset命令"></a>git reset命令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --soft 29f9bbd77da69902335cad77a12eac7b022b9f63</span><br></pre></td></tr></table></figure>

<p><img src="https://mr-liu-cheng.github.io/2024/12/09/git%E4%BF%AE%E6%94%B9%E5%8E%86%E5%8F%B2%E6%8F%90%E4%BA%A4/image-1.png"><br><code>git reset --soft</code> 命令是 Git 中的一个强大工具，它可以用于回退到某个特定的提交，同时保留文件的修改内容。这里是对该命令的详细解释：</p>
<h2 id="命令结构"><a href="#命令结构" class="headerlink" title="命令结构"></a>命令结构</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --soft &lt;commit-hash&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>git reset</code> 是 Git 的一个基本命令，用于将当前的分支回退到指定的提交，并调整索引和工作目录中的内容。</li>
<li><code>--soft</code> 是 <code>git reset</code> 的一个选项，决定了在回退时如何处理文件的状态。<code>--soft</code> 会将 <code>HEAD</code> 移动到指定的 commit，但 <strong>不会修改工作目录</strong>  和 <strong>索引</strong> （也就是暂存区），因此你仍然可以看到文件的修改。</li>
</ul>
<p><strong>各部分的解释：</strong></p>
<ol>
<li><strong><code>&lt;commit-hash&gt;</code></strong> ：</li>
</ol>
<ul>
<li><code>&lt;commit-hash&gt;</code> 是你想回退到的 commit 的哈希值。可以是一个完整的哈希（如 <code>29f9bbd77da69902335cad77a12eac7b022b9f63</code>）或者它的前几位字符（例如，<code>29f9bbd</code>）。<code>git log</code> 可以帮助你查找这个哈希值。</li>
</ul>
<ol start="2">
<li><strong><code>--soft</code> 选项</strong> ：</li>
</ol>
<ul>
<li><code>--soft</code> 选项使得 Git <strong>只移动 HEAD</strong> ，即将当前分支指针（HEAD）回退到指定的 commit，但 <strong>保留工作目录和暂存区的内容不变</strong> 。换句话说，你的文件更改不会丢失，修改内容仍然会保留在暂存区。</li>
<li>如果你有一些修改没有提交，<code>git reset --soft</code> 会将这些修改<strong>保留</strong> ，并将它们放回暂存区，让你可以再次提交。</li>
</ul>
<p><strong>具体的效果：</strong></p>
<ol>
<li><strong><code>HEAD</code> 会回退</strong> ：这会将当前分支的 HEAD 指针（即当前正在工作的提交）指向指定的 commit。</li>
<li><strong>工作目录不变</strong> ：你的工作目录中的文件不会被修改，意味着所有修改都会被保留，你的文件内容依然存在。</li>
<li><strong>暂存区不变</strong> ：所有已暂存的文件也会被保留，意味着如果你之前用 <code>git add</code> 添加了修改，那么这些修改依然会保留在暂存区。</li>
</ol>
<p><strong>举个例子：</strong></p>
<p>假设你有如下提交历史：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">commit</span> a1b2c3d <span class="operator">-</span> 最新的提交</span><br><span class="line"><span class="keyword">commit</span> <span class="number">29</span>f9bbd <span class="operator">-</span> 需要回退到的提交</span><br><span class="line"><span class="keyword">commit</span> d4e5f6g <span class="operator">-</span> 更早的提交</span><br></pre></td></tr></table></figure>

<ul>
<li>如果你执行 <code>git reset --soft 29f9bbd77da69902335cad77a12eac7b022b9f63</code>，这会发生以下变化：<ul>
<li><strong><code>HEAD</code></strong>  会指向 <code>29f9bbd</code> 提交，即回到你指定的提交。</li>
<li><strong>工作目录</strong>  保持不变，你的文件内容依然会保留。</li>
<li><strong>暂存区</strong>  也保持不变，你之前 <code>git add</code> 的修改仍然会保留。</li>
</ul>
</li>
</ul>
<p>这样，你就可以修改代码并重新提交，而不丢失之前的修改。</p>
<p><strong>常见的用法：</strong></p>
<ul>
<li><strong>撤销最近的提交并保留修改</strong> ：假设你做了一个提交，但发现需要修改其中的内容，你可以使用 <code>git reset --soft HEAD^</code>（<code>HEAD^</code> 是指上一个提交）。这会撤销最近的提交，并保留你工作目录和暂存区的内容，允许你重新修改并提交。</li>
</ul>
<p><strong>总结：</strong></p>
<ul>
<li><code>git reset --soft &lt;commit-hash&gt;</code> 会将 <code>HEAD</code> 回退到指定的 commit，但 <strong>保留文件内容和暂存区的修改</strong> 。这适用于想要撤销某个提交，但又不希望丢失工作进度的情况。</li>
<li>使用此命令时，你可以修改或更新暂存区的文件，再次进行提交。</li>
</ul>
<h2 id="reset-三种模式"><a href="#reset-三种模式" class="headerlink" title="reset 三种模式"></a><code>reset</code> <a href="https://x.zhixing.co/devops/the-differences-and-usages-of-3-modes-git-reset/">三种模式</a></h2><p>分别是 <code>--soft</code>、<code>--mixed</code> 和 <code>--hard</code>，它们的作用和影响不同。下面是对每种模式的详细讲解：<br><img src="https://mr-liu-cheng.github.io/2024/12/09/git%E4%BF%AE%E6%94%B9%E5%8E%86%E5%8F%B2%E6%8F%90%E4%BA%A4/image.png"></p>
<ol>
<li><strong><code>git reset --soft &lt;commit&gt;</code></strong></li>
</ol>
<ul>
<li><strong>作用</strong> ：将 <code>HEAD</code> 指针回退到指定的 commit，但 <strong>不更改工作目录和暂存区</strong> 。</li>
<li><strong>效果</strong> ：<ul>
<li><code>HEAD</code> 回退到指定的提交，即当前分支指针会指向指定的提交。</li>
<li><strong>工作目录（Working Directory）</strong>  不变，文件的内容保留不变。</li>
<li><strong>暂存区（Staging Area）</strong>  保持不变，之前已经暂存的文件仍然存在于暂存区。</li>
</ul>
</li>
<li><strong>使用场景</strong> ：<ul>
<li>用于撤销最后一次提交并修改其中的内容，但保留文件更改和暂存区内容。适合你想重新提交修改内容时使用。</li>
</ul>
</li>
<li><strong>示例</strong> ：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --soft HEAD~1</span><br></pre></td></tr></table></figure>

<p>这个命令将 HEAD 回退到上一个提交（<code>HEAD~1</code>），但是保留当前工作目录和暂存区中的修改。你可以编辑文件、重新暂存并提交。</p>
<ol start="2">
<li><strong><code>git reset --mixed &lt;commit&gt;</code></strong>  （默认选项）</li>
</ol>
<ul>
<li><strong>作用</strong> ：将 <code>HEAD</code> 回退到指定的 commit，并且 <strong>更新暂存区</strong> （即撤销暂存），但 <strong>不更改工作目录</strong> 。</li>
<li><strong>效果</strong> ：<ul>
<li><code>HEAD</code> 回退到指定的提交。</li>
<li><strong>工作目录</strong>  不变，文件内容保留不变。</li>
<li><strong>暂存区（Staging Area）</strong>  被更新为与指定 commit 的内容一致。也就是说，撤销所有已经 <code>git add</code> 的文件，将它们从暂存区中移除，但文件内容仍然保持在工作目录中。</li>
</ul>
</li>
<li><strong>使用场景</strong> ：<ul>
<li>用于撤销提交并取消暂存文件，但你仍然想保留文件修改。适用于需要修改代码但不想保留当前暂存区修改的场景。</li>
</ul>
</li>
<li><strong>示例</strong> ：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --mixed HEAD~1</span><br></pre></td></tr></table></figure>

<p>这个命令将 HEAD 回退到上一个提交，并且从暂存区移除修改，但文件内容仍然保留。相当于撤销最近的 <code>git add</code> 操作。</p>
<ol start="3">
<li><strong><code>git reset --hard &lt;commit&gt;</code></strong></li>
</ol>
<ul>
<li><strong>作用</strong> ：将 <code>HEAD</code>、<strong>暂存区</strong>  和 <strong>工作目录</strong>  都回退到指定的 commit。</li>
<li><strong>效果</strong> ：<ul>
<li><code>HEAD</code> 回退到指定的提交。</li>
<li><strong>工作目录</strong>  会被重置为指定 commit 的内容，所有未提交的修改（无论是暂存区的还是工作目录的）都会被丢弃。</li>
<li><strong>暂存区</strong>  也会被重置，撤销所有已暂存的文件。</li>
</ul>
</li>
<li><strong>使用场景</strong> ：<ul>
<li>用于彻底放弃当前的修改，回到某个提交状态。适用于你想完全撤销修改并且不保留任何更改时使用。</li>
</ul>
</li>
<li><strong>示例</strong> ：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD~1</span><br></pre></td></tr></table></figure>

<p>这个命令会将 HEAD 回退到上一个提交，并且<strong>彻底丢弃</strong> 工作目录和暂存区中的所有修改。<strong>注意</strong> ：此操作无法恢复，慎重使用！</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><table>
<thead>
<tr>
<th>选项</th>
<th>HEAD</th>
<th>工作目录</th>
<th>暂存区</th>
<th>应用场景</th>
</tr>
</thead>
<tbody><tr>
<td>soft</td>
<td>回退到指定 commit</td>
<td>保持不变</td>
<td>保持不变</td>
<td>用于撤销提交并重新提交，保留修改和暂存区内容</td>
</tr>
<tr>
<td>mixed</td>
<td>回退到指定 commit</td>
<td>保持不变</td>
<td>更新为指定 commit 内容</td>
<td>用于撤销提交并取消暂存，保留工作目录的内容</td>
</tr>
<tr>
<td>hard</td>
<td>回退到指定 commit</td>
<td>重置为指定 commit 内容</td>
<td>重置为指定 commit 内容</td>
<td>用于彻底丢弃修改，回到某个 commit 状态</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><img src="https://mr-liu-cheng.github.io/2024/12/09/git%E4%BF%AE%E6%94%B9%E5%8E%86%E5%8F%B2%E6%8F%90%E4%BA%A4/image-2.png"></th>
<th><img src="https://mr-liu-cheng.github.io/2024/12/09/git%E4%BF%AE%E6%94%B9%E5%8E%86%E5%8F%B2%E6%8F%90%E4%BA%A4/image-3.png"></th>
<th><img src="https://mr-liu-cheng.github.io/2024/12/09/git%E4%BF%AE%E6%94%B9%E5%8E%86%E5%8F%B2%E6%8F%90%E4%BA%A4/image-4.png"></th>
</tr>
</thead>
</table>
<p><strong>适用场景举例：</strong></p>
<ul>
<li><strong><code>--soft</code></strong> ：你想撤销最近的提交，但不丢失文件修改，准备重新提交。</li>
<li><strong><code>--mixed</code></strong> ：你想撤销提交并取消暂存，但仍然保留修改，进行后续编辑。</li>
<li><strong><code>--hard</code></strong> ：你想丢弃所有本地的修改并回到某个提交的状态，彻底放弃当前修改。</li>
</ul>
<p><code>每个选项的影响不同，选择时需要根据实际需求来决定。</code></p>
<p><strong>git reset</strong> 会改变提交历史，建议不要在公共分支使用，如果在公共分支撤销提交可以使用 <strong>git revert</strong> ，它会保留记录。在前端开发中，如果修改只存在于本地，并且你确定不需要这些修改，可以使用 git reset 来快速清理。但如果修改已经推送到远程分支，或者你只是想撤销某个特定的提交，为了避免影响团队协作和代码历史的完整性，强烈建议使用 git revert。 尤其是在多人协作的项目中，revert 更安全可靠。</p>
<p><strong>hard</strong> 模式不仅会丢失已提交的改动，还可能丢失本地未提交的改动，要慎重使用。</p>
<h1 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h1><p>git revert是用于“反做”某一个版本，以达到撤销该版本的修改的目的。比如，我们commit了三个版本（版本一、版本二、 版本三），突然发现版本二不行（如：有bug），想要撤销版本二，但又不想影响撤销版本三的提交，就可以用 git revert 命令来反做版本二，生成新的版本四，这个版本四里会保留版本三的东西，但撤销了版本二的东西(test2)<br><img src="https://mr-liu-cheng.github.io/2024/12/09/git%E4%BF%AE%E6%94%B9%E5%8E%86%E5%8F%B2%E6%8F%90%E4%BA%A4/image-6.png"></p>
<h1 id="revert-vs-reset"><a href="#revert-vs-reset" class="headerlink" title="revert vs reset"></a>revert vs reset</h1><table>
<thead>
<tr>
<th>特性</th>
<th>git reset</th>
<th>git revert</th>
</tr>
</thead>
<tbody><tr>
<td>修改历史</td>
<td>会修改分支历史</td>
<td>不会修改分支历史，而是创建一个新的提交</td>
</tr>
<tr>
<td>应用场景</td>
<td>本地开发，未推送的修改</td>
<td>已经推送的提交</td>
</tr>
<tr>
<td>安全性</td>
<td>相对低，可能会丢失提交</td>
<td>相对高，保留完整的提交历史</td>
</tr>
<tr>
<td>精确度</td>
<td>可以回退到任意提交</td>
<td>可以精确撤销某个提交的更改</td>
</tr>
<tr>
<td>应用场景</td>
<td>1.本地开发，还未推送: 当你提交了一些错误的更改，或者想放弃一些本地的修改，可以使用 reset 来撤销这些更改。2.修改提交历史: 例如，合并多个提交为一个，或者修改某个提交的message。3.放弃合并: 如果你在合并分支时遇到冲突，并且决定放弃合并，可以使用 reset 回到合并前的状态。</td>
<td>1.已经推送的提交: 当你需要撤销一个已经推送到远程仓库的提交时，应该使用 revert，因为它不会修改已有的提交历史，避免了团队协作中的混乱。2.只想撤销某个特定提交: revert 可以精确地撤销某个提交的更改，而不会影响其他提交。</td>
</tr>
</tbody></table>
<p>推荐：</p>
<p><a href="https://x.zhixing.co/devops/the-differences-and-usages-of-git-merge-rebase/">Git merge &amp; rebase 区别和用法</a></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git学习</title>
    <url>/2024/12/11/git%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="https://mr-liu-cheng.github.io/2024/12/11/git%E5%AD%A6%E4%B9%A0/image.png" alt="alt text"></p>
<p><img src="https://mr-liu-cheng.github.io/2024/12/11/git%E5%AD%A6%E4%B9%A0/image-1.png" alt="alt text"><br><img src="https://mr-liu-cheng.github.io/2024/12/11/git%E5%AD%A6%E4%B9%A0/image-2.png" alt="alt text"></p>
<h2 id="git文件的三种状态"><a href="#git文件的三种状态" class="headerlink" title="git文件的三种状态"></a>git文件的三种状态</h2><p>已修改(modified)<br>已经修改了工作区的某些文件。</p>
<p>已暂存(staged)<br>已经执行了add操作，但还没有提交，只是暂存在提交清单里。</p>
<p>已提交(commited)<br>已经提交到本地仓库里，但还没push到远端仓库。<br><img src="https://mr-liu-cheng.github.io/2024/12/11/git%E5%AD%A6%E4%B9%A0/image-3.png" alt="alt text"><br><a href="https://cycle263.github.io/blogs/team/git/advanced.html">参考资料</a></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 图片加载方案</title>
    <url>/2024/12/11/hexo-%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h1 id="安装-hexo-asset-image-插件"><a href="#安装-hexo-asset-image-插件" class="headerlink" title="安装 hexo-asset-image 插件"></a>安装 hexo-asset-image 插件</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<p>打开node_modules\hexo-asset-image\index.js文件59行附近：<br>修改代码为如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//src = srcArray.join(&#x27;/&#x27;);这个是源码,从这下面开始修改替换</span></span><br><span class="line"><span class="keyword">var</span> baseUrl = data.<span class="property">permalink</span>;</span><br><span class="line"><span class="comment">// 判断当前页面是否为文章</span></span><br><span class="line"><span class="keyword">if</span> (data.<span class="property">layout</span> === <span class="string">&#x27;post&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 匹配最后两个斜杠间的内容和最后的斜杠，并替换为单个斜杠，目的是去掉文档存放的文件夹名</span></span><br><span class="line">    baseUrl = data.<span class="property">permalink</span>.<span class="title function_">replace</span>(<span class="regexp">/\/[^\/]+\/$/</span>, <span class="string">&#x27;/&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, baseUrl +src);</span><br><span class="line"><span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;update link as:--&gt;&quot;</span>+baseUrl+src);</span><br></pre></td></tr></table></figure>

<h2 id="页签页md文档中插入图片"><a href="#页签页md文档中插入图片" class="headerlink" title="页签页md文档中插入图片"></a>页签页md文档中插入图片</h2><p>上面的方法可以在普通文章使用，但是页签页内容插入图片会多出: .html后缀</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://xxx/musicPage/index.html</span><br></pre></td></tr></table></figure>
<p>打开_config.yml ，修改如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="1-trailing-index"><a href="#1-trailing-index" class="headerlink" title="1. trailing_index"></a>1. trailing_index</h3><p>这个选项控制是否在 URL 末尾自动添加 index。例如：</p>
<p>如果 trailing_index: true，那么像 <a href="https://example.com/posts/">https://example.com/posts/</a> 这样的 URL 会变成 <a href="https://example.com/posts/index.html%E3%80%82">https://example.com/posts/index.html。</a><br>如果 trailing_index: false，URL 末尾就不会自动添加 index，它会保持 <a href="https://example.com/posts/">https://example.com/posts/</a> 的形式。</p>
<h3 id="2-trailing-html"><a href="#2-trailing-html" class="headerlink" title="2. trailing_html"></a>2. trailing_html</h3><p>这个选项控制是否在 URL 末尾添加 .html 后缀。例如：</p>
<p>如果 trailing_html: true，像 <a href="https://example.com/posts/">https://example.com/posts/</a> 会变成 <a href="https://example.com/posts/index.html%E3%80%82">https://example.com/posts/index.html。</a><br>如果 trailing_html: false，URL 会去掉 .html 后缀，直接使用像 <a href="https://example.com/posts/">https://example.com/posts/</a> 这样的格式。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>这个方式的好处在于：</p>
<ul>
<li>支持vscode中正常预览</li>
<li>无需修改Ctrl+V粘贴的路径</li>
<li>本地构建的网站和正式部署的网站都能正常显示</li>
</ul>
<h1 id="html-脚本中添加图片"><a href="#html-脚本中添加图片" class="headerlink" title="html 脚本中添加图片"></a>html 脚本中添加图片</h1><p>我们直接复制粘贴的路径：<br>将路径</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">![<span class="string">alt text</span>](<span class="link">index/image.png</span>)</span><br></pre></td></tr></table></figure>
<p>粘贴到scr中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;index/image.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;捡贝&quot;</span> <span class="attr">class</span>=<span class="string">&quot;project-image w-full h-64 object-cover&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们会发现 html 最终生成的路径中少了 index 这一层：</p>
<p>src : index&#x2F;image.png</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update link as:--&gt;https://xxxx/About/   image.png</span><br></pre></td></tr></table></figure>
<p>我们需要在hexo-asset-image\index.js文件中处理：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(srcArray.<span class="property">length</span> &gt; <span class="number">1</span> &amp;&amp; srcArray[<span class="number">0</span>]!=<span class="string">&quot;index&quot;</span>)<span class="comment">//添加判断防止使用html 加载图片时会抹去index层级</span></span><br><span class="line">   srcArray.<span class="title function_">shift</span>();</span><br></pre></td></tr></table></figure>
<p>这段代码原本是要移出src中第一层目录，应为md格式会自动补充根目录，会出现重复目录，但是html 格式不涉及自动补充根目录，所以不需要这一步，因此要添加判断。</p>
<p>node_modules\hexo-asset-image\index.js需要修改部分的完整的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;img&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="keyword">if</span> ($(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">       <span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line">       <span class="keyword">var</span> src = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">       <span class="comment">//console.info&amp;&amp;console.info(&quot;.... &quot;+src);</span></span><br><span class="line">       <span class="keyword">if</span>(!(<span class="regexp">/http[s]*.*|\/\/.*/</span>.<span class="title function_">test</span>(src)</span><br><span class="line">         || <span class="regexp">/^\s+\//</span>.<span class="title function_">test</span>(src)</span><br><span class="line">         || <span class="regexp">/^\s*\/uploads|images\//</span>.<span class="title function_">test</span>(src))) &#123;</span><br><span class="line">         <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">         <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">         <span class="keyword">var</span> linkArray = link.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">elem</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">         &#125;);</span><br><span class="line">         <span class="keyword">var</span> srcArray = src.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">elem</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">         &#125;);</span><br><span class="line">         <span class="comment">// if(srcArray.length &gt; 1 &amp;&amp; srcArray[0]!=&quot;index&quot;)//添加判断防止使用html 加载图片时会抹去index层级</span></span><br><span class="line">         <span class="comment">// srcArray.shift();</span></span><br><span class="line">         src = srcArray.<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">         <span class="comment">// console.info&amp;&amp;console.info(&quot;____&quot; +src);</span></span><br><span class="line">         </span><br><span class="line">         <span class="keyword">var</span> baseUrl = data.<span class="property">permalink</span>;</span><br><span class="line">         <span class="comment">// 判断当前页面是否为文章</span></span><br><span class="line">         <span class="keyword">if</span> (data.<span class="property">layout</span> === <span class="string">&#x27;post&#x27;</span>) &#123;</span><br><span class="line">           baseUrl = data.<span class="property">permalink</span>.<span class="title function_">replace</span>(<span class="regexp">/\/[^\/]+\/$/</span>, <span class="string">&#x27;/&#x27;</span>); <span class="comment">// 匹配最后两个斜杠间的内容和最后的斜杠，并替换为单个斜杠</span></span><br><span class="line">         &#125;</span><br><span class="line">         $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, baseUrl +src);</span><br><span class="line">         <span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;update link as:--&gt;&quot;</span>+baseUrl+ <span class="string">&quot;   &quot;</span>  +src);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line">       <span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>($(<span class="variable language_">this</span>));</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 路径表示</title>
    <url>/2024/12/01/hexo%20%E8%B7%AF%E5%BE%84%E8%A1%A8%E7%A4%BA/</url>
    <content><![CDATA[<p>在 Hexo 中，路径表示（即如何表示文件和目录的路径）有几个常见的用法和约定，具体取决于你是在配置站点、创建内容，还是处理资源。以下是常见的路径表示方式和相关解释：</p>
<h2 id="相对路径与绝对路径"><a href="#相对路径与绝对路径" class="headerlink" title="相对路径与绝对路径"></a><strong>相对路径与绝对路径</strong></h2><ul>
<li><p><strong>相对路径</strong> ：Hexo 中很多地方使用相对路径，通常相对路径是相对于 Hexo 项目的根目录或某些子目录的。例如：</p>
<ul>
<li><code>source/_posts/</code> 表示博客文章的存储位置。</li>
<li><code>source/_pages/</code> 表示页面文件的存储位置。</li>
</ul>
</li>
<li><p><strong>绝对路径</strong> ：通常是相对于网站根目录的路径，例如：</p>
<ul>
<li><code>/about/</code> 代表网站根目录下的 <code>about</code> 页面（通常通过 Hexo 配置生成）。</li>
</ul>
</li>
</ul>
<h2 id="Hexo-配置文件中的路径表示"><a href="#Hexo-配置文件中的路径表示" class="headerlink" title="Hexo 配置文件中的路径表示"></a><strong>Hexo 配置文件中的路径表示</strong></h2><p>在 Hexo 的 <code>_config.yml</code> 配置文件中，许多路径表示都是相对于站点根目录的。例如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo站点的URL</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://yoursite.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 博客的URL路径</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 存放站点文件的目录</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong><code>url</code></strong> ：表示站点的根 URL。</li>
<li><strong><code>permalink</code></strong> ：指定生成的文章 URL 格式。<code>/</code> 斜杠表示站点根目录。</li>
<li><strong><code>source_dir</code></strong>  和 <strong><strong><code>source_dir</code></strong>  和 <code>public_dir</code></strong> ：定义了源文件和生成后的文件所在的目录。</li>
</ul>
<h2 id="创建文章与页面的路径表示"><a href="#创建文章与页面的路径表示" class="headerlink" title="创建文章与页面的路径表示"></a><strong>创建文章与页面的路径表示</strong></h2><p>在 Hexo 中，创建文章和页面时通常会有路径约定：</p>
<ul>
<li><strong>文章路径</strong> ：默认情况下，文章会存放在 <code>source/_posts/</code> 目录下。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new post <span class="string">&quot;My First Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>该命令会在 <code>source/_posts/</code> 目录下创建一个新的 Markdown 文件，文件名是文章标题的拼音。</p>
<ul>
<li><strong>页面路径</strong> ：页面会存放在 <code>source/_pages/</code> 目录下。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;About&quot;</span></span><br></pre></td></tr></table></figure>

<p>该命令会在 <code>source/_pages/</code> 下创建一个新的页面文件，通常用于站点的静态页面（如关于页面、联系页面等）。</p>
<h2 id="静态资源路径表示"><a href="#静态资源路径表示" class="headerlink" title="静态资源路径表示"></a><strong>静态资源路径表示</strong></h2><p>在 Hexo 中，静态资源（如图片、JavaScript 文件、CSS 文件等）通常放在 <code>source</code> 目录中的子目录中，然后通过相对路径引用。这些资源会被复制到 <code>public</code> 目录下，并可以通过 URL 引用。</p>
<ul>
<li>例如，你可以把图片放在 <code>source/images/</code> 目录中，引用时使用相对路径：</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">Image</span>](<span class="link">images/my-image.jpg</span>)</span><br></pre></td></tr></table></figure>

<p>该图片会被复制到 <code>public/images/</code> 目录，并且可以通过 <code>/images/my-image.jpg</code> 访问。</p>
<h2 id="主题配置中的路径"><a href="#主题配置中的路径" class="headerlink" title="主题配置中的路径"></a><strong>主题配置中的路径</strong></h2><p>在 Hexo 主题的 <code>_config.yml</code> 配置文件中，通常会有一些与路径相关的设置，特别是与静态资源和模板文件相关的路径。例如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主题中静态资源的路径</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/favicon.ico</span></span><br><span class="line"><span class="attr">logo:</span> <span class="string">/images/logo.png</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>favicon</code> 和 <code>logo</code> 等设置中使用的是站点根目录的路径（如 <code>/images/logo.png</code>），这些路径在生成站点时会指向 <code>public</code> 目录中的相应位置。</li>
</ul>
<h2 id="URL-路径与文件路径的映射"><a href="#URL-路径与文件路径的映射" class="headerlink" title="URL 路径与文件路径的映射"></a><strong>URL 路径与文件路径的映射</strong></h2><p>Hexo 将博客文章文件的路径（例如 <code>source/_posts/</code>）转换为对应的 URL 路径。例如，如果你有一个 <code>source/_posts/2024/hello-world.md</code> 的文章文件，Hexo 会将其转换为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://yoursite.com/2024/hello-world/</span><br></pre></td></tr></table></figure>

<p>路径映射规则是通过 <code>_config.yml</code> 中的 <code>permalink</code> 配置项进行控制的。你可以自定义文章的 URL 路径格式，例如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br></pre></td></tr></table></figure>

<p>这样，文章的 URL 路径会包含年份、月份、日期和文章标题。</p>
<h2 id="路径和文件系统中的斜杠"><a href="#路径和文件系统中的斜杠" class="headerlink" title="路径和文件系统中的斜杠"></a>路径和文件系统中的斜杠</h2><ul>
<li>在 Hexo 中，路径使用 <code>/</code> 斜杠表示文件和目录之间的分隔符。即使在 Windows 系统中，Hexo 仍然使用 <code>/</code> 作为路径分隔符，这是因为 Hexo 在不同操作系统上有统一的路径处理方式。</li>
</ul>
<h2 id="Hexo-路径表示的小技巧"><a href="#Hexo-路径表示的小技巧" class="headerlink" title="Hexo 路径表示的小技巧"></a><strong>Hexo 路径表示的小技巧</strong></h2><ul>
<li><strong>绝对路径引用：</strong>  如果想要在站点中引用根目录下的文件，可以使用 <code>/</code> 开头的绝对路径。例如，<code>/images/logo.png</code> 会引用 <code>public/images/logo.png</code>。</li>
<li><strong>相对路径引用：</strong>  在文章或页面中引用文件时，通常使用相对路径。例如，<code>./images/photo.jpg</code> 会引用 <code>source/images/photo.jpg</code>。</li>
</ul>
<p><strong>例子：在 Hexo 中使用路径</strong></p>
<p>假设你有以下文件结构：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">hexo/</span><br><span class="line">  source/</span><br><span class="line">    _posts/</span><br><span class="line">      <span class="keyword">my</span>-first-post.md</span><br><span class="line">    images/</span><br><span class="line">      logo.png</span><br><span class="line">  themes/</span><br><span class="line">    <span class="keyword">my</span>-theme/</span><br><span class="line">      _config.yml</span><br><span class="line">  _config.yml</span><br></pre></td></tr></table></figure>

<ol>
<li><strong>创建一个新文章</strong> ：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new post <span class="string">&quot;My First Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>这将在 <code>source/_posts/</code> 中创建一个 <code>my-first-post.md</code> 文件。</p>
<ol start="2">
<li><strong>在文章中引用图片</strong> ：</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">Logo</span>](<span class="link">/images/logo.png</span>)</span><br></pre></td></tr></table></figure>

<p>这会引用 <code>public/images/logo.png</code> 文件。</p>
<ol start="3">
<li><strong>修改 <code>_config.yml</code> 配置</strong> ：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">http://mywebsite.com</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br></pre></td></tr></table></figure>

<p>这将使生成的文章 URL 类似于 <code>http://mywebsite.com/2024/01/01/my-first-post/</code>。</p>
<p><strong>总结</strong></p>
<p>在 Hexo 中，路径的表示方式通常依赖于文件系统的位置、站点的根目录以及 <code>_config.yml</code> 中的配置。你可以使用相对路径和绝对路径来链接文章、页面、静态资源，并通过配置文件来控制 URL 路径和静态资源的位置。</p>
<h2 id="和"><a href="#和" class="headerlink" title=".&#x2F;和..&#x2F;"></a>.&#x2F;和..&#x2F;</h2><p><code>./</code> 和 <code>../</code> 是文件路径中的相对路径符号，通常用于指示文件系统中的位置。它们在命令行、编程、文件引用等场景中都非常常见。下面是它们的具体含义：</p>
<h3 id="的含义"><a href="#的含义" class="headerlink" title="./ 的含义"></a><code>./</code> 的含义</h3><ul>
<li><code>./</code> 表示当前目录（即你当前所在的目录）。</li>
<li>它通常用来表示当前目录下的某个文件或文件夹，或者作为命令行中的前缀来执行当前目录中的程序。</li>
</ul>
<p><strong>例子：</strong></p>
<ul>
<li><code>./file.txt</code>：指当前目录下的 <code>file.txt</code> 文件。</li>
<li>在命令行中执行当前目录中的程序：<code>./myprogram</code>。<br>在 Hexo 或其他 Web 开发场景中，<code>./</code> 主要用于引用当前目录中的文件。例如，在文章中引用当前目录下的图片：</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">My Image</span>](<span class="link">./images/photo.jpg</span>)</span><br></pre></td></tr></table></figure>

<p>这表示引用 <code>source/images/photo.jpg</code> 文件。</p>
<h3 id="的含义-1"><a href="#的含义-1" class="headerlink" title="../ 的含义"></a><code>../</code> 的含义</h3><ul>
<li><code>../</code> 表示上一级目录（即当前目录的父目录）。</li>
<li>它通常用于返回到当前目录的上一级目录，在文件系统中向上移动一个层级。</li>
</ul>
<p><strong>例子：</strong></p>
<ul>
<li><code>../file.txt</code>：指的是上一级目录中的 <code>file.txt</code> 文件。</li>
<li><code>../../</code>：表示上上一级目录。<br>在 Hexo 或其他开发场景中，<code>../</code> 用于引用上级目录中的文件。例如，假设你在 <code>source/_posts/</code> 目录下，并且想要引用 <code>source/images/</code> 目录中的文件，可以使用 <code>../</code>：</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">Logo</span>](<span class="link">../images/logo.png</span>)</span><br></pre></td></tr></table></figure>

<p>这表示从当前目录 <code>source/_posts/</code> 向上一级（即 <code>source/</code>）跳转，再进入 <code>images/</code> 目录，最终引用 <code>logo.png</code> 文件。</p>
<p><strong>实际示例</strong></p>
<p>假设文件结构如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo/</span><br><span class="line">  <span class="built_in">source</span>/</span><br><span class="line">    _posts/</span><br><span class="line">      post1.md</span><br><span class="line">    images/</span><br><span class="line">      logo.png</span><br></pre></td></tr></table></figure>

<ul>
<li>如果你在 <code>post1.md</code> 文件中想要引用 <code>logo.png</code> 文件：</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">Logo</span>](<span class="link">../images/logo.png</span>)</span><br></pre></td></tr></table></figure>

<p>这样，<code>../</code> 表示从 <code>source/_posts/</code> 目录向上返回到 <code>source/</code> 目录，然后再进入 <code>images/</code> 目录。</p>
<ul>
<li>如果你在 <code>source/images/</code> 中，想引用 <code>source/_posts/post1.md</code> 文件：</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">Post 1</span>](<span class="link">../_posts/post1.md</span>)</span><br></pre></td></tr></table></figure>

<p>这样，<code>../</code> 会让你从 <code>images/</code> 目录返回到 <code>source/</code>，然后进入 <code>_posts/</code> 目录。</p>
<p><strong>总结：</strong></p>
<ul>
<li><strong><code>./</code></strong> ：当前目录。</li>
<li><strong><code>../</code></strong> ：上一级目录（父目录）。</li>
</ul>
<p>这两个符号是相对路径的一部分，帮助你在不同的目录之间进行导航。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo添加标签样式</title>
    <url>/2024/12/15/hexo%E6%B7%BB%E5%8A%A0%E6%A0%87%E7%AD%BE%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<p>在 <strong>Hexo Butterfly</strong>  主题中，由于 Markdown 文件中的代码会经过 Hexo 的解析后转换为 HTML，而 HTML 的样式需要依赖主题中的 CSS 文件，直接嵌入的 TailwindCSS 或自定义 CSS 可能无法生效。如果你希望在 Hexo 中生效样式，可以尝试以下方法：</p>
<h2 id="解决方法-1：使用行内样式-style-属性"><a href="#解决方法-1：使用行内样式-style-属性" class="headerlink" title="解决方法 1：使用行内样式 (style 属性)"></a>解决方法 1：使用行内样式 (style 属性)</h2><p>在 Hexo Markdown 中，直接使用 HTML 的 <code>style</code> 属性为每个标签设置样式。这种方法不依赖外部 CSS 文件，可以确保样式生效。<br>示例： </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;skill-tags&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #e0f7fa; color: #006064; padding: 4px 12px; border-radius: 999px; display: inline-block; text-align: center;&quot;</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #e0f7fa; color: #006064; padding: 4px 12px; border-radius: 999px; display: inline-block; text-align: center;&quot;</span>&gt;</span>Plasmo<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #e0f7fa; color: #006064; padding: 4px 12px; border-radius: 999px; display: inline-block; text-align: center;&quot;</span>&gt;</span>Typescript<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #e0f7fa; color: #006064; padding: 4px 12px; border-radius: 999px; display: inline-block; text-align: center;&quot;</span>&gt;</span>Supabase<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #e0f7fa; color: #006064; padding: 4px 12px; border-radius: 999px; display: inline-block; text-align: center;&quot;</span>&gt;</span>TailwindCSS<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="解决方法-2：在主题配置中添加自定义-CSS"><a href="#解决方法-2：在主题配置中添加自定义-CSS" class="headerlink" title="解决方法 2：在主题配置中添加自定义 CSS"></a>解决方法 2：在主题配置中添加自定义 CSS</h2><p>步骤：</p>
<ol>
<li><p><strong>找到 Butterfly 主题的 CSS 文件：</strong><br>通常在 <code>source/css/_custom.css</code> 或 <code>source/_data/styles.styl</code> 中可以添加自定义样式。</p>
</li>
<li><p><strong>添加样式：</strong></p>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.skill-tags</span> <span class="selector-class">.tag</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e0f7fa</span>; <span class="comment">/* 浅蓝色背景 */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#006064</span>; <span class="comment">/* 深蓝色文字 */</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.875rem</span>; <span class="comment">/* 文字大小 */</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">12px</span>; <span class="comment">/* 内边距 */</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">999px</span>; <span class="comment">/* 圆角背景 */</span></span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><strong>在 Markdown 文件中使用：</strong></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;skill-tags&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;tag&quot;</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;tag&quot;</span>&gt;</span>Plasmo<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;tag&quot;</span>&gt;</span>Typescript<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;tag&quot;</span>&gt;</span>Supabase<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;tag&quot;</span>&gt;</span>TailwindCSS<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="解决方法-3：使用-Hexo-的-标签"><a href="#解决方法-3：使用-Hexo-的-标签" class="headerlink" title="解决方法 3：使用 Hexo 的 &lt;style&gt; 标签"></a>解决方法 3：使用 Hexo 的 <code>&lt;style&gt;</code> 标签</h2><p>如果不想全局修改，只想在某一篇文章中生效样式，可以直接在 Markdown 文件中添加 <code>&lt;style&gt;</code> 标签。<br>示例： </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.skill-tags</span> <span class="selector-class">.tag</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#e0f7fa</span>; <span class="comment">/* 浅蓝色背景 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#006064</span>; <span class="comment">/* 深蓝色文字 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">0.875rem</span>; <span class="comment">/* 文字大小 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">12px</span>; <span class="comment">/* 内边距 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">999px</span>; <span class="comment">/* 圆角背景 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;skill-tags&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;tag&quot;</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;tag&quot;</span>&gt;</span>Plasmo<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;tag&quot;</span>&gt;</span>Typescript<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;tag&quot;</span>&gt;</span>Supabase<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;tag&quot;</span>&gt;</span>TailwindCSS<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：<br><code>&lt;style&gt;</code> 标签必须写在文章的 HTML 部分中，不能直接用在纯 Markdown 语法中。</p>
<h2 id="解决方法-4：通过-Butterfly-的自定义组件功能"><a href="#解决方法-4：通过-Butterfly-的自定义组件功能" class="headerlink" title="解决方法 4：通过 Butterfly 的自定义组件功能"></a>解决方法 4：通过 Butterfly 的自定义组件功能</h2><p> Butterfly 主题支持自定义 <code>shortcode</code> 或 <strong>Nunjucks 模板</strong> ，可以在配置中添加一个通用组件。<br>步骤：</p>
<ol>
<li><p><strong>在 Butterfly 的 <code>source/_data</code> 中创建 <code>custom.swig</code> 文件（如果不存在）。</strong></p>
</li>
<li><p><strong>定义一个标签模板：</strong></p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% for skill in skills %&#125;</span><br><span class="line">    &lt;span class=&quot;tag&quot; style=&quot;background-color: #e0f7fa; color: #006064; padding: 4px 12px; border-radius: 999px; display: inline-block; text-align: center;&quot;&gt;&#123;&#123; skill &#125;&#125;&lt;/span&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><strong>在 Markdown 文件中使用：</strong></li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% custom skills=[&quot;Next&quot;, &quot;Plasmo&quot;, &quot;Typescript&quot;, &quot;Supabase&quot;, &quot;TailwindCSS&quot;] %&#125;</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong> </p>
<hr>
<p>如果样式完全无法生效，建议先检查以下内容：</p>
<ol>
<li><p>Markdown 文件是否启用了 HTML 渲染（Hexo 默认支持）。</p>
</li>
<li><p>自定义样式是否被主题的全局样式覆盖，可以用浏览器调试工具检查。</p>
</li>
<li><p>如果是 TailwindCSS，确保它已集成到 Butterfly 主题中。优先推荐 <strong>方法 2</strong>（主题配置中添加 CSS）或 <strong>方法 3</strong>（文章中嵌入 <code>&lt;style&gt;</code> 标签），这些方法既灵活又能避免重复代码。</p>
</li>
</ol>
<blockquote>
<p>样式效果</p>
</blockquote>
<div class="skill-tags">
    <span style="background-color: #e0f7fa; color: #006064; padding: 4px 12px; border-radius: 999px; display: inline-block; text-align: center;">效果一</span>
    <span style="background-color: #e0f7fa; color: #006064; padding: 4px 12px; border-radius: 999px; display: inline-block; text-align: center;">Plasmo</span>
    <span style="background-color: #e0f7fa; color: #006064; padding: 4px 12px; border-radius: 999px; display: inline-block; text-align: center;">Typescript</span>
    <span style="background-color: #e0f7fa; color: #006064; padding: 4px 12px; border-radius: 999px; display: inline-block; text-align: center;">Supabase</span>
    <span style="background-color: #e0f7fa; color: #006064; padding: 4px 12px; border-radius: 999px; display: inline-block; text-align: center;">TailwindCSS</span>
</div>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 疑难杂症</title>
    <url>/2024/12/28/hexo%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/</url>
    <content><![CDATA[<h2 id="butterfly通过样式隐藏页脚"><a href="#butterfly通过样式隐藏页脚" class="headerlink" title="butterfly通过样式隐藏页脚"></a>butterfly通过样式隐藏页脚</h2><p>如果配置文件没有提供选项，可以通过 CSS 隐藏页脚区域。<br>打开或创建 source&#x2F;css&#x2F;_layout&#x2F;footer.styl 文件。</p>
<p>添加以下内容：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">复制代码</span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="hexo-页面跳转时，界面未完全加载"><a href="#hexo-页面跳转时，界面未完全加载" class="headerlink" title="hexo 页面跳转时，界面未完全加载"></a>hexo 页面跳转时，界面未完全加载</h2><p>页面刷新时正常的，但是从其他页面跳转过来时，js代码加载的内容都没加载出来</p>
<p>我的做法是采用延时执行js的函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="title class_">Render</span>(); &#125;, <span class="number">100</span>); <span class="comment">// 延迟渲染，确保布局已完成</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个方法不行</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="title class_">Render</span>();&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="hexo-butterfly-主题的布局修改"><a href="#hexo-butterfly-主题的布局修改" class="headerlink" title="hexo butterfly 主题的布局修改"></a>hexo butterfly 主题的布局修改</h2><h3 id="隐藏侧边栏：Front-matter中添加"><a href="#隐藏侧边栏：Front-matter中添加" class="headerlink" title="隐藏侧边栏：Front-matter中添加"></a>隐藏侧边栏：Front-matter中添加</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aside: false</span><br></pre></td></tr></table></figure>

<p>如果要今后添加的的page或者post都隐藏侧边栏可以在模版Front-matter中添加上面的代码就行。但是已有的界面是需要自己手动添加从而实现隐藏效果。<br>scaffolds\page.md<br>scaffolds\post.md</p>
<p>若是要完全隐藏或者在特殊的page隐藏可以在butterfly.config中修改配置实现：这里好像不能添加自定义的page，不然将会省事很多。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hide:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Show the button to hide the aside in bottom right button</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Position: left / right</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">archive:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">tag:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">category:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="拓宽页面内容div"><a href="#拓宽页面内容div" class="headerlink" title="拓宽页面内容div"></a>拓宽页面内容div</h3><ul>
<li>方法一：直接在md&#x2F;html&#x2F;js文件中添加js代码<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//内容扩宽</span></span><br><span class="line"><span class="keyword">const</span> page = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;page&quot;</span>);</span><br><span class="line">page.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&quot;100%&quot;</span>; <span class="comment">// 撑满屏幕</span></span><br><span class="line"><span class="comment">// page.style.setProperty(&quot;padding&quot;, &quot;160px&quot;, &quot;important&quot;);</span></span><br><span class="line">page.<span class="property">style</span>.<span class="property">padding</span> = <span class="string">&quot;86px&quot;</span>; <span class="comment">// 撑满屏幕 不加单位视为百分百</span></span><br><span class="line"><span class="keyword">const</span> content = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;content-inner&quot;</span>);</span><br><span class="line">content.<span class="property">style</span>.<span class="property">maxWidth</span> = <span class="string">&quot;100%&quot;</span>; <span class="comment">// 撑满屏幕</span></span><br><span class="line">content.<span class="property">style</span>.<span class="property">margin</span> = <span class="string">&quot;0&quot;</span>; <span class="comment">// 撑满屏幕</span></span><br><span class="line">content.<span class="property">style</span>.<span class="property">padding</span> = <span class="string">&quot;0&quot;</span>; <span class="comment">// 撑满屏幕</span></span><br></pre></td></tr></table></figure></li>
<li>方法二：直接在themes\butterfly\source\js\main.js文件中添加js代码<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//内容扩宽</span></span><br><span class="line"><span class="keyword">const</span> page = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;page&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (page &amp;&amp; saveStatus == <span class="string">&#x27;hide&#x27;</span>) &#123;</span><br><span class="line">page.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&quot;100%&quot;</span>; <span class="comment">// 撑满屏幕</span></span><br><span class="line">page.<span class="property">style</span>.<span class="property">padding</span> = <span class="string">&quot;86px&quot;</span>; <span class="comment">// 撑满屏幕 不加单位视为百分百</span></span><br><span class="line"><span class="keyword">const</span> content = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;content-inner&quot;</span>);</span><br><span class="line">content.<span class="property">style</span>.<span class="property">maxWidth</span> = <span class="string">&quot;100%&quot;</span>; <span class="comment">// 撑满屏幕</span></span><br><span class="line">content.<span class="property">style</span>.<span class="property">margin</span> = <span class="string">&quot;0&quot;</span>; <span class="comment">// 撑满屏幕</span></span><br><span class="line">content.<span class="property">style</span>.<span class="property">padding</span> = <span class="string">&quot;0&quot;</span>; <span class="comment">// 撑满屏幕</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>强调：<br>样式中尺寸有两种表现：百分百、具体像素值（12px）。<br>自带的标签可能会有默认样式信息，例如<code>&lt;Img&gt;</code>,若是要修改，需要使用 !important 提高当前样式的优先级</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;project.image&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;project-cover&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.project-cover</span> &#123;</span></span><br><span class="line"><span class="language-css">     <span class="attribute">max-width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">     <span class="comment">/* 图片宽度不会超出容器宽度 */</span></span></span><br><span class="line"><span class="language-css">     <span class="attribute">max-height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">     <span class="comment">/* 图片高度不会超出容器高度 */</span></span></span><br><span class="line"><span class="language-css">     <span class="attribute">object-fit</span>: contain;</span></span><br><span class="line"><span class="language-css">     <span class="comment">/* 保持图片比例，完全显示图片 */</span></span></span><br><span class="line"><span class="language-css">     <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">     <span class="comment">/* 防止图片默认的 inline 行为 */</span></span></span><br><span class="line"><span class="language-css">     <span class="attribute">margin</span>: <span class="number">0</span> <span class="meta">!important</span>;<span class="comment">/* 防止img默认的样式覆盖，提高当前样式的优先级*/</span></span></span><br><span class="line"><span class="language-css">     <span class="comment">/* 设置外边距为零 */</span></span></span><br><span class="line"><span class="language-css">     <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">     <span class="comment">/* 移除边框 */</span></span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>或者这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">page.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;padding&quot;</span>, <span class="string">&quot;160px&quot;</span>, <span class="string">&quot;important&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="div中的图片居中"><a href="#div中的图片居中" class="headerlink" title="div中的图片居中"></a>div中的图片居中</h2><p>display: flex;<br>flex-direction: column;<br>align-items: center;</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.project-card</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#505050</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="comment">/* 设置为弹性布局 */</span></span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="comment">/* 子元素纵向排列 */</span></span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="comment">/* 子元素水平居中 */</span></span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">8px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="格子布局"><a href="#格子布局" class="headerlink" title="格子布局"></a>格子布局</h2><p><strong>总结对比</strong> </p>
<table>
<thead>
<tr>
<th>用法</th>
<th>列数</th>
<th>列宽度计算</th>
<th>剩余空间行为</th>
</tr>
</thead>
<tbody><tr>
<td>repeat(4, 1fr)</td>
<td>固定为 4 列</td>
<td>按容器宽度动态调整</td>
<td>每列均分剩余空间</td>
</tr>
<tr>
<td>repeat(auto-fit, 250px)</td>
<td>动态调整</td>
<td>固定为 250px</td>
<td>剩余空间为空白（列不会超出内容）</td>
</tr>
<tr>
<td>repeat(auto-fit, minmax(250px, 1fr))</td>
<td>动态调整</td>
<td>最小 250px，最大均分剩余空间</td>
<td>剩余空间被列均分,空列也会被均分掉</td>
</tr>
<tr>
<td>repeat(auto-fill, minmax(250px, 1fr))</td>
<td>动态调整</td>
<td>最小 250px，最大均分剩余空间</td>
<td>剩余空间被列均分，但空列会保留</td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.projects</span> &#123;</span><br><span class="line">     <span class="attribute">display</span>: grid;</span><br><span class="line">     <span class="comment">/* 指定4列，每列等分容器宽度 */</span></span><br><span class="line">     <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">4</span>, <span class="number">1</span>fr); </span><br><span class="line">     <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fit, <span class="number">250px</span>);</span><br><span class="line">     <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fit, <span class="built_in">minmax</span>(<span class="number">250px</span>, <span class="number">1</span>fr));</span><br><span class="line">     <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fill, <span class="built_in">minmax</span>(<span class="number">250px</span>, <span class="number">1</span>fr));</span><br><span class="line">     <span class="comment">/* grid-auto-rows: 150px; */</span></span><br><span class="line">     <span class="comment">/* 每行高度固定为 150px */</span></span><br><span class="line">     <span class="attribute">gap</span>: <span class="number">20px</span>;</span><br><span class="line">     <span class="comment">/* 格子间距 20px*/</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>


<br>


<h2 id="auto-fit-与-auto-fill-的主要区别"><a href="#auto-fit-与-auto-fill-的主要区别" class="headerlink" title="auto-fit 与 auto-fill 的主要区别"></a><code>auto-fit</code> 与 <code>auto-fill</code> 的主要区别</h2><ul>
<li><p><strong><code>auto-fit</code></strong> : 将列压缩以适应容器宽度，仅保留有内容的列，列之间的多余空间会重新分配。</p>
</li>
<li><p><strong><code>auto-fill</code></strong> : 尽可能填满容器，即使某些列是“空的”，也会在容器内保留这些占位列。</p>
</li>
</ul>
<p><code>repeat(auto-fit, minmax(250px, 1fr))</code> </p>
<hr>
<ul>
<li>重点是“<strong>压缩列数</strong> ”：如果列宽足够，未使用的列会被移除，只有实际需要的列保留。</li>
<li>剩余空间会被现有列均分。</li>
<li>只生成实际需要的列，不创建空列。</li>
<li>列总数 &#x3D; <strong>实际内容列数</strong> 。</li>
</ul>
<br>

<p><code>repeat(auto-fill, minmax(250px, 1fr))</code> </p>
<hr>
<ul>
<li>重点是“<strong>填满容器</strong> ”：尝试创建更多列，即使其中部分列没有内容（生成“空列”作为占位）。</li>
<li>剩余空间会均分到所有列（包括空列）。</li>
<li>列总数 &#x3D; <strong>容器能容纳的最大列数</strong> 。</li>
</ul>
<br>

<p><strong>详细比较表</strong> </p>
<table>
<thead>
<tr>
<th>特性</th>
<th>auto-fit</th>
<th>auto-fill</th>
</tr>
</thead>
<tbody><tr>
<td>列数</td>
<td>根据实际内容调整列数</td>
<td>根据容器宽度填满列数</td>
</tr>
<tr>
<td>剩余空间分配</td>
<td>均分到现有列</td>
<td>均分到所有列（包括空列）</td>
</tr>
<tr>
<td>未使用的列</td>
<td>移除</td>
<td>保留为占位列</td>
</tr>
<tr>
<td>空列是否创建</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>优势</td>
<td>精简布局，适合动态内容数量，仅有实际内容需要显示时 ,移除无用列，避免产生空白列</td>
<td>容器填满，适合固定布局，需要固定网格布局（占位列）时 ,空列提供一致的布局效果</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>butterfly</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>git无法访问外网</title>
    <url>/2024/12/31/git%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E5%A4%96%E7%BD%91/</url>
    <content><![CDATA[<h2 id="事情经过"><a href="#事情经过" class="headerlink" title="事情经过"></a>事情经过</h2><p>使用vscode git 提交代码和 hexo d时</p>
<p>莫名其妙出现 github ssh 22端口无法访问的情况：</p>
<p>尝试过切换成443端口<br>使用https访问远程，但是github客户端可以访问</p>
<p>怀疑是网络问题，没添加代理：</p>
<p>给vscode添加代理<br>给git添加代理</p>
<p>怀疑clash for windows 没开系统代理或者规则错误：</p>
<p>开启 system proxy<br>启用 global 规则</p>
<p>使用vscode、 cmd 、powershell和git ping Google.com 和 ping github.com都无效，只能ping 国内网站。</p>
<p>使用git bash clone 远程仓库一般都是没问题的，但是还是失败了，</p>
<p>致使明白翻墙工具的系统代理没开成功，遂比较另一台电脑，执行ping Google.com可以，对比翻墙工具的设置，</p>
<p>找到罪魁祸首是：tun mode</p>
<hr>
<h2 id="Clash-for-Windows-的-TUN-模式"><a href="#Clash-for-Windows-的-TUN-模式" class="headerlink" title="Clash for Windows 的 TUN 模式"></a>Clash for Windows 的 TUN 模式</h2><p>是一种用于透明代理的高级功能，可以影响网络流量的路由方式。以下是详细说明：</p>
<p><strong>什么是 TUN 模式？</strong><br>TUN 模式是基于操作系统的虚拟网络接口（TUN&#x2F;TAP）的工作方式，用于拦截和重定向网络流量。通过 TUN 模式，Clash 可以透明地代理应用程序的流量，而无需每个应用程序单独设置代理。</p>
<ul>
<li><p><strong>TUN 的工作原理</strong> ：</p>
<ul>
<li><p>它创建一个虚拟网卡，接收系统的所有网络流量。</p>
</li>
<li><p>根据 Clash 的代理规则，对网络请求进行分流或直接代理。</p>
</li>
</ul>
</li>
<li><p><strong>与系统代理的区别</strong> ：</p>
<ul>
<li><p>系统代理需要应用程序支持 HTTP&#x2F;HTTPS 或 SOCKS 协议，并手动配置代理。</p>
</li>
<li><p>TUN 模式可以自动拦截所有网络请求，适用于不支持代理配置的程序（如部分游戏或终端工具）。</p>
</li>
</ul>
</li>
</ul>
<h3 id="TUN-模式对系统代理的影响-为什么影响系统代理？"><a href="#TUN-模式对系统代理的影响-为什么影响系统代理？" class="headerlink" title="TUN 模式对系统代理的影响 为什么影响系统代理？"></a><strong>TUN 模式对系统代理的影响</strong> <strong>为什么影响系统代理？</strong></h3><ol>
<li><strong>默认拦截所有流量</strong> ：</li>
</ol>
<ul>
<li>TUN 模式接管了系统的大部分网络流量，可能会导致一些程序不再使用系统代理。</li>
</ul>
<ol start="2">
<li><strong>规则优先级问题</strong> ：</li>
</ol>
<ul>
<li>如果 Clash 的规则设置不正确，可能导致部分流量未能正确代理或被错误路由。</li>
</ul>
<ol start="3">
<li><strong>与其他代理冲突</strong> ：</li>
</ol>
<ul>
<li><p>如果系统已经配置了其他代理设置，TUN 模式可能会导致冲突，从而影响代理功能。<br><strong>常见问题</strong>  </p>
</li>
<li><p><strong>系统代理无效</strong> ：TUN 模式可能覆盖了系统代理设置。</p>
</li>
<li><p><strong>部分应用程序无法联网</strong> ：TUN 模式可能未正确配置分流规则，导致流量被错误处理。</p>
</li>
</ul>
<h3 id="解决方法-启用-TUN-模式的正确方式"><a href="#解决方法-启用-TUN-模式的正确方式" class="headerlink" title="解决方法 启用 TUN 模式的正确方式"></a><strong>解决方法</strong> <strong>启用 TUN 模式的正确方式</strong></h3><ol>
<li><p>打开 Clash for Windows。</p>
</li>
<li><p>在设置中启用 TUN 模式：  <strong>General &gt; TUN Mode</strong>  勾选开启。</p>
</li>
<li><p>确保 DNS 设置启用：   在 <strong>DNS Settings</strong>  中启用 “Enable”。</p>
</li>
</ol>
<p><strong>调整代理规则</strong>  </p>
<ol>
<li><p>确保规则优先级正确：</p>
<p>  例如： </p>
<ul>
<li>将 <code>Direct</code> 设置为默认策略。</li>
<li>对需要代理的流量（如 GitHub）添加规则，强制走代理。</li>
</ul>
</li>
<li><p>检查规则文件是否准确无误（可以通过日志查看流量是否正确路由）。</p>
</li>
<li><p>测试网络连接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping https://github.com</span><br></pre></td></tr></table></figure>
<p><strong>关闭 TUN 模式（如果不需要）</strong></p>
</li>
</ol>
<ul>
<li>如果系统代理已经满足需求，可以关闭 TUN 模式：<ol>
<li>打开 Clash 设置。</li>
<li>取消勾选 <strong>TUN Mode</strong> 。</li>
<li>确保 <strong>System Proxy</strong>  启用。</li>
</ol>
</li>
</ul>
<p><strong>TUN 模式的适用场景</strong> </p>
<ul>
<li>用于拦截不支持手动代理配置的程序流量。</li>
<li>适用于需要全局透明代理的环境，如部分终端工具或游戏。</li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>unity webGL 移动端 输入框无法弹出虚拟键盘</title>
    <url>/2024/12/13/unity-webGL-%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E8%BE%93%E5%85%A5%E6%A1%86%E6%97%A0%E6%B3%95%E5%BC%B9%E5%87%BA%E8%99%9A%E6%8B%9F%E9%94%AE%E7%9B%98/</url>
    <content><![CDATA[<ol>
<li><p>去这个网站下载工程：</p>
<p><a href="https://github.com/kou-yeung/WebGLInput">https://github.com/kou-yeung/WebGLInput</a></p>
</li>
<li><p>将下载工程中的WebGLSupport文件夹拷贝到自己的工程中</p>
<p><img src="https://mr-liu-cheng.github.io/2024/12/13/unity-webGL-%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E8%BE%93%E5%85%A5%E6%A1%86%E6%97%A0%E6%B3%95%E5%BC%B9%E5%87%BA%E8%99%9A%E6%8B%9F%E9%94%AE%E7%9B%98/20241213_141006_image.png"></p>
</li>
<li><p>将WebGLInput.cs组件添加到InputField组件挂载的对象上</p>
</li>
<li><p>勾选show html element 不然输入后不显示。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>unity</category>
        <category>webGL</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>webGL</tag>
      </tags>
  </entry>
  <entry>
    <title>unity tmp中文显示</title>
    <url>/2024/12/13/unity-tmp%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<h1 id="创建tmp中文字体资源"><a href="#创建tmp中文字体资源" class="headerlink" title="创建tmp中文字体资源"></a>创建tmp中文字体资源</h1><p>1.<strong>选择Window&#x2F;TextMeshPro&#x2F;Font Asset Creator</strong></p>
<p>2.<strong>Font Asset Creator设置界面如图</strong><br><img src="https://mr-liu-cheng.github.io/2024/12/13/unity-tmp%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA/image-1.png" alt="alt text"><br>Source Font File：拖入需要使用的字体</p>
<ul>
<li>Sampling Point Size：设置用于生成字体纹理的字体大小（以磅为单位）</li>
<li>Auto Sizeing：自动设置大小</li>
<li>Custom Size：自定义大小，在文本框中输入所需的大小</li>
</ul>
<p>Padding：字间距，填充越大，过渡越平滑，从而允许更高质量的渲染和更大的效果，如粗轮廓。</p>
<p>Packing Method：指定如何使字符适合字体纹理。</p>
<ul>
<li>Optimum：查找仍然适合纹理中所有字符的最大可能自动字体大小。</li>
<li>Fast：更快地计算字符打包，但可能使用比优化模式更小的字体大小。</li>
</ul>
<p>Atlas Resolution：设置字体纹理的大小宽度和高度，以像素为单位</p>
<p>Character Set：选择预定义的字符集。</p>
<ul>
<li>ASCII：包括 ASCII 字符集中的可见字符。</li>
<li>Extended ASCII：包括扩展 ASCII 字符集中的可见字符。</li>
<li>ASCII Lowercase：仅包含 ASCII 字符集中可见的小写字符。</li>
<li>ASCII Uppercase：仅包含 ASCII 字符集中可见的大写字符</li>
<li>Numbers+Sysbols：仅包括来自 ASCII 字符集的可见数字和符号。</li>
<li>Custom Range：输入一系列十进制值或值范围，以指定要包括的字符。</li>
<li>Unicode Range(Hex)：输入一系列 unicode 十六进制值或值范围，以指定要包含的字符。</li>
<li>Custom Characters：输入字符序列以指定要包含的字符。</li>
<li>Characters from File：指定的文本资源</li>
</ul>
<p>Render Mode：指定输出字体图集时要使用的渲染模式。</p>
<ul>
<li>SMOOTH_HINTED：将图集渲染为抗锯齿位图，并将字符像素与纹理像素对齐以获得更清晰的结果。</li>
<li>SMOOTH：将图集渲染为抗锯齿位图。</li>
<li>RASTER_HINTED：将图集渲染为非抗锯齿位图，并将字符像素与纹理像素对齐以获得更清晰的结果。</li>
<li>RASTER：将图集渲染为非抗锯齿位图。</li>
<li>SDF：使用较慢但更准确的 SDF 生成模式渲染图集，并且没有过采样。</li>
<li>SDF8：使用较慢但更准确的 SDF 生成模式和 8 倍过采样渲染图集。</li>
<li>SDF16：使用更慢但更准确的 SDF 生成模式和 16 倍过采样渲染图集。</li>
<li>SDF32：使用较慢但更准确的 SDF 生成模式和 32 倍过采样渲染图集。将此设置用于具有复杂或小字符的字体。</li>
<li>SDFAA_HINTED：使用更快但不太准确的 SDF 生成模式渲染图集，并将字符像素与纹理像素对齐以获得更清晰的结果，它生成的字体图集足以满足大多数情况。</li>
<li>SDFAA：使用更快但不太准确的 SDF 生成模式渲染图集，它生成的字体图集足以满足大多数情况。</li>
</ul>
<p>Get Kerning Pairs：启用此选项可从字体复制字距调整数据。</p>
<p>Generate Font Atlas：我们把包含中文字体的文件拖入Characters from File中，然后点击此按钮开始生成</p>
<p>3.生成后，如上面效果图<br>注意：字体越多，生成的时间越长…Packing Method还是选Fast吧，Optimum太慢了</p>
<p>4.点击Save按钮保存</p>
<p>5.现在就可以正常使用这个字体了</p>
<h1 id="tmp创建字体报错"><a href="#tmp创建字体报错" class="headerlink" title="tmp创建字体报错:"></a>tmp创建字体报错:</h1><p><img src="https://mr-liu-cheng.github.io/2024/12/13/unity-tmp%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA/image.png" alt="alt text"></p>
<p>问题原因:</p>
<ul>
<li>字体贴图空间不足</li>
</ul>
<p>字体贴图的分辨率（Font Atlas Resolution）不够大，无法容纳所有字符。</p>
<p>生成 3000 字符所需的贴图分辨率和时间较低，一般<code>1024x1024</code> 或<code>2048x2048</code> 即可完成。</p>
<p>生成 7000 字符可能需要<code>4096x4096</code> 或更高分辨率，耗时更长。</p>
<ul>
<li>字符范围太大</li>
</ul>
<p>您可能尝试一次性添加过多的字符，例如一个完整的 Unicode 中文字符集。</p>
<ul>
<li>字体文件不支持这些字符</li>
</ul>
<p>使用的字体文件可能并未包含这些特定的字符。</p>
<ul>
<li>渲染模式设置不当</li>
</ul>
<p>当前的 Render Mode 设置可能导致字体生成失败。</p>
<hr>
<ul>
<li><strong>选择 3000 汉字：</strong><ul>
<li>如果项目是游戏、日常应用或现代场景，3000 字足够使用。</li>
<li>性能优先的项目，如 WebGL、移动端、嵌入式系统。</li>
</ul>
</li>
<li><strong>选择 7000 汉字：</strong><ul>
<li>如果项目需要显示古文、法律文书或覆盖专业领域的特殊字符。</li>
<li>针对高性能设备或专业场景，如 PC 端应用、大型屏幕展示。</li>
</ul>
</li>
</ul>
<p>汉字集下载：</p>
<p><a href="https://github.com/wy-luke/Unity-TextMeshPro-Chinese-Characters-Set">https://github.com/wy-luke/Unity-TextMeshPro-Chinese-Characters-Set</a></p>
]]></content>
      <categories>
        <category>unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>tmp</tag>
      </tags>
  </entry>
  <entry>
    <title>医保</title>
    <url>/2025/01/03/%E5%8C%BB%E4%BF%9D/</url>
    <content><![CDATA[<h1 id="灵活就业一档医保报销政策"><a href="#灵活就业一档医保报销政策" class="headerlink" title="灵活就业一档医保报销政策"></a>灵活就业一档医保报销政策</h1><p>深圳灵活就业人员缴纳的医保是职工一档医保，享受的也是职工一档医保待遇。普通门诊统筹支付比例与医疗机构级别挂钩，最高可报销75%，更多报销内容说明见正文。</p>
<h2 id="一档医保报销比例"><a href="#一档医保报销比例" class="headerlink" title="一档医保报销比例"></a>一档医保报销比例</h2><p>深圳灵活就业人员缴纳的医保是职工一档医保，享受的也是职工一档医保待遇。</p>
<h3 id="一、门诊报销比例"><a href="#一、门诊报销比例" class="headerlink" title="一、门诊报销比例"></a>一、门诊报销比例</h3><p>职工基本医保、居民基本医保普通门诊统筹支付比例与医疗机构级别挂钩。</p>
<ul>
<li>一级以下医疗机构(例如社康)报销比例：75%;</li>
<li>二级医院报销比例：65%;</li>
<li>三级医院报销比例：55%;</li>
</ul>
<p>退休人员、60周岁及以上居民在上述基础上相应提高5%。</p>
<h3 id="二、一档医保市内住院报销比例"><a href="#二、一档医保市内住院报销比例" class="headerlink" title="二、一档医保市内住院报销比例"></a>二、一档医保市内住院报销比例</h3><p>在一级以下医院支付比例为94%;</p>
<p>二级医院支付比例为92%;</p>
<p>三级医院支付比例为90%;</p>
<p>退休人员支付比例为95%。</p>
<p>住院起付线</p>
<p>参保人在市内定点医疗机构住院发生的基本医疗费用，未超过起付线的由参保人支付;超过起付线的部分，由基本医疗保险统筹基金按规定支付。</p>
<p>住院起付线按照医院级别设定，其中一级以下医院为200元，二级医院为400元，三级医院为600元。</p>
<p>参保人在一个医疗保险年度内二次及以上住院的，住院起付线分别为：一级以下医院为100元，二级医院为200元，三级医院为300元。</p>
<h2 id="灵活就业医保缴费标准"><a href="#灵活就业医保缴费标准" class="headerlink" title="灵活就业医保缴费标准"></a>灵活就业医保缴费标准</h2><p><img src="https://mr-liu-cheng.github.io/2025/01/03/%E5%8C%BB%E4%BF%9D/image.png"></p>
<blockquote>
<p>缴费金额：</p>
</blockquote>
<p>6733x0.02 个人余额134</p>
<p>6733x0.07 个人缴纳医保费用471</p>
<p>一级医院  限额1万多  报销 75% 费用，个人只需要支付剩余的 25% 费用。</p>
<p><code>小知识</code>：社康是一级，三甲医院是是三级</p>
<p><code>各级别医院医保报销比例一般情况</code>（医保内的项目和药物）：</p>
<ul>
<li>一级医院（社区医院）： 报销比例最高，鼓励患者首诊在社区医院。</li>
<li>二级医院： 报销比例次之，适合治疗一些常见的疾病。</li>
<li>三级医院（三甲医院）： 报销比例最低，主要用于治疗疑难杂症和重症疾病。</li>
</ul>
<p><code>不同级别医院的医保报销限额</code>（医保内的项目和药物）：</p>
<ul>
<li>一级医院（社区医院）： 报销限额相对较低，但报销比例较高。</li>
<li>二级医院： 报销限额比一级医院高，但比三级医院低。</li>
<li>三级医院（三甲医院）： 报销限额最高，但报销比例相对较低。</li>
</ul>
<h2 id="门诊和住院医保报销的区别"><a href="#门诊和住院医保报销的区别" class="headerlink" title="门诊和住院医保报销的区别"></a>门诊和住院医保报销的区别</h2><table>
<thead>
<tr>
<th>项目</th>
<th>门诊</th>
<th>住院</th>
</tr>
</thead>
<tbody><tr>
<td>报销比例</td>
<td>一般较低</td>
<td>一般较高</td>
</tr>
<tr>
<td>起付线</td>
<td>一般有</td>
<td>一般有</td>
</tr>
<tr>
<td>年度限额</td>
<td>一般有</td>
<td>一般有</td>
</tr>
<tr>
<td>报销范围</td>
<td>诊疗费、药费、检查费等</td>
<td>所有医疗费用</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>社保</category>
      </categories>
      <tags>
        <tag>医保</tag>
      </tags>
  </entry>
  <entry>
    <title>日历【FullCalendar+Lunar+RRule+Popper】</title>
    <url>/2025/01/02/%E6%97%A5%E5%8E%86%E3%80%90FullCalendar-Lunar-RRule-Popper%E3%80%91/</url>
    <content><![CDATA[<p><strong>先看官方文档，不懂的再chatgpt，最后谷歌百度搜问题</strong></p>
<h1 id="FullCalendar"><a href="#FullCalendar" class="headerlink" title="FullCalendar"></a>FullCalendar</h1><ul>
<li>视图</li>
<li>单元格渲染</li>
<li>单元格大小适配</li>
</ul>
<p>确保计算和数据加载完毕，延迟100ms渲染。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">datesSet</span>:</span><br><span class="line">    <span class="keyword">function</span> (<span class="params">dateInfo</span>) &#123;<span class="comment">//处理默认空事件留白</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Dates set:&#x27;</span>, dateInfo);  <span class="comment">// 打印日期范围</span></span><br><span class="line">        <span class="comment">// 延迟执行，以确保日历完全渲染</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> dayCells = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.fc-daygrid-day&#x27;</span>);  <span class="comment">// 获取所有日期格子</span></span><br><span class="line">            dayCells.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">dayCell</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> eventsContainer = dayCell.<span class="title function_">querySelector</span>(<span class="string">&#x27;.fc-daygrid-day-events&#x27;</span>);</span><br><span class="line">                <span class="keyword">if</span> (eventsContainer) &#123;</span><br><span class="line">                    eventsContainer.<span class="property">style</span>.<span class="property">margin</span> = <span class="number">0</span>;  <span class="comment">// 隐藏没有事件的容器</span></span><br><span class="line">                    <span class="comment">// 如果该日期格子没有事件，隐藏事件容器</span></span><br><span class="line">                    <span class="keyword">if</span> (!dayCell.<span class="title function_">querySelector</span>(<span class="string">&#x27;.fc-event&#x27;</span>)) &#123;</span><br><span class="line">                        eventsContainer.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;  <span class="comment">// 隐藏没有事件的容器</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;, <span class="number">100</span>);  <span class="comment">// 延迟100ms执行</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<h1 id="Lunar"><a href="#Lunar" class="headerlink" title="Lunar"></a>Lunar</h1><ul>
<li>法定节假日</li>
<li>节气</li>
<li>农历日期</li>
<li>宜忌</li>
<li>生日</li>
</ul>
<h1 id="RRule"><a href="#RRule" class="headerlink" title="RRule"></a>RRule</h1><ul>
<li><p>命名空间</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rruleOccurrences = <span class="keyword">new</span> <span class="title class_">RRule</span>(rruleEvent.<span class="property">rrule</span>).<span class="title function_">all</span>(); </span><br><span class="line"><span class="comment">//无法识别 RRule，提示未定义，我们引入了rrule库就要引入命名空间 rrule</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">RRule</span> = rrule.<span class="property">RRule</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>格式与FullCalendar插件语法不同：</p>
<ul>
<li><strong>FullCalendar语法</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> calendar2 = <span class="keyword">new</span> <span class="title class_">FullCalendar</span>.<span class="title class_">Calendar</span>(calendarEl, &#123;</span><br><span class="line">      <span class="attr">events</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="attr">title</span>: <span class="string">&#x27;my recurring event&#x27;</span>,</span><br><span class="line">              <span class="attr">rrule</span>: &#123;</span><br><span class="line">                  <span class="attr">freq</span>: <span class="string">&#x27;weekly&#x27;</span>,</span><br><span class="line">                  <span class="attr">interval</span>: <span class="number">1</span>,</span><br><span class="line">                  <span class="attr">byweekday</span>: [<span class="string">&#x27;mo&#x27;</span>, <span class="string">&#x27;fr&#x27;</span>],</span><br><span class="line">                  <span class="attr">dtstart</span>: <span class="string">&#x27;2024-02-01T10:30:00&#x27;</span>, <span class="comment">// will also accept &#x27;20120201T103000&#x27;</span></span><br><span class="line">                  <span class="attr">until</span>: <span class="string">&#x27;2025-06-01&#x27;</span> <span class="comment">// will also accept &#x27;20120201&#x27;</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      ]</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li>
<li><strong>RRule 语法</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">RRule</span> = rrule.<span class="property">RRule</span>;</span><br><span class="line"><span class="keyword">var</span> rruleEvent =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;rrule event&#x27;</span>,</span><br><span class="line">    <span class="attr">rrule</span>: &#123;</span><br><span class="line">        <span class="attr">freq</span>: <span class="title class_">RRule</span>.<span class="property">WEEKLY</span>,</span><br><span class="line">        <span class="attr">interval</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">byweekday</span>: [<span class="title class_">RRule</span>.<span class="property">MO</span>, <span class="title class_">RRule</span>.<span class="property">FR</span>],</span><br><span class="line">        <span class="attr">dtstart</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2024</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">30</span>),</span><br><span class="line">        <span class="attr">until</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2025</span>, <span class="number">12</span>, <span class="number">31</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">duration</span>: <span class="string">&#x27;02:00&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 rrule.js 解析 RRule</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">RRule</span>); <span class="comment">// 应该输出 &quot;function&quot;</span></span><br><span class="line"><span class="keyword">const</span> rruleOccurrences = <span class="keyword">new</span> <span class="title class_">RRule</span>(rruleEvent.<span class="property">rrule</span>).<span class="title function_">all</span>(); <span class="comment">// 获取所有日期实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换为 FullCalendar 可用事件格式</span></span><br><span class="line"><span class="keyword">const</span> rruleEvents = rruleOccurrences.<span class="title function_">map</span>(<span class="function"><span class="params">date</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">title</span>: rruleEvent.<span class="property">title</span>,</span><br><span class="line">    <span class="attr">start</span>: date,</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>单个对象声明<br>在还没有做好重复事件配置处理时，保持按照单个声明，这个和其他event配置不同。因为一个重复事件肯能涉及好多时间段，相当于多个事件的集合。</p>
</li>
<li><p>events 属性和 evens 函数不可兼得<br>evens 函数:更灵活，配置变量,但是重复事件要自己转换<br>events 属性:死板，但是支持重复事件，根据FullCalendar语法来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">events</span>:  [...birthdayEvents, ...myEvents, ...<span class="title class_">InternationalFestivals</span>, ...rruleEvents],</span><br><span class="line">or</span><br><span class="line"><span class="attr">events</span>: <span class="keyword">function</span> (<span class="params">info, successCallback, failureCallback</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取当前视图的起始日期</span></span><br><span class="line">            <span class="keyword">const</span> viewStart = <span class="keyword">new</span> <span class="title class_">Date</span>(info.<span class="property">start</span>);</span><br><span class="line">            <span class="keyword">const</span> curMonthIndex = (viewStart.<span class="title function_">getDate</span>() !== <span class="number">1</span>) ? viewStart.<span class="title function_">getMonth</span>() + <span class="number">1</span> : viewStart.<span class="title function_">getMonth</span>();<span class="comment">//月份下标  0-11  12是下一年1月</span></span><br><span class="line">            currentYear = (viewStart.<span class="title function_">getMonth</span>() === <span class="number">11</span> &amp;&amp; curMonthIndex === <span class="number">12</span>) ? viewStart.<span class="title function_">getFullYear</span>() + <span class="number">1</span> : viewStart.<span class="title function_">getFullYear</span>();</span><br><span class="line">            <span class="keyword">var</span> curMonth = curMonthIndex == <span class="number">12</span> ? <span class="number">1</span> : curMonthIndex + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">const</span> solar = <span class="title class_">Solar</span>.<span class="title function_">fromYmd</span>(currentYear, curMonth, <span class="number">1</span>); <span class="comment">// 构造阳历日期</span></span><br><span class="line">            <span class="keyword">const</span> lunar = solar.<span class="title function_">getLunar</span>(); <span class="comment">// 转为农历日期</span></span><br><span class="line">            <span class="keyword">var</span> curYearLunar = lunar.<span class="title function_">getYear</span>();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前显示的主月份年份是:&#x27;</span>, currentYear, <span class="string">&#x27; &#x27;</span>, curMonth, <span class="string">&#x27; &#x27;</span>, lunar.<span class="title function_">toString</span>(), <span class="string">&#x27; &#x27;</span>, solar.<span class="title function_">toString</span>());</span><br><span class="line"></span><br><span class="line">            <span class="title function_">defineBirthday</span>(curYearLunar);</span><br><span class="line">            <span class="title class_">AddAnniversaryDate</span>();</span><br><span class="line">            <span class="title function_">defineMyEvent</span>();</span><br><span class="line">            <span class="title function_">defineInternationalFestivals</span>();</span><br><span class="line">            <span class="comment">// 合并所有事件数组</span></span><br><span class="line">            <span class="keyword">const</span> allEvents = [...birthdayEvents, ...myEvents, ...<span class="title class_">InternationalFestivals</span>, ...rruleEvents];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 过滤出在当前视图范围内的事件</span></span><br><span class="line">            <span class="keyword">const</span> filteredEvents = allEvents.<span class="title function_">filter</span>(<span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> eventStart = <span class="keyword">new</span> <span class="title class_">Date</span>(event.<span class="property">start</span>).<span class="title function_">getTime</span>();</span><br><span class="line">                <span class="keyword">const</span> eventEnd = event.<span class="property">end</span> ? <span class="keyword">new</span> <span class="title class_">Date</span>(event.<span class="property">end</span>).<span class="title function_">getTime</span>() : eventStart;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 判断事件是否与视图范围有重叠</span></span><br><span class="line">                <span class="keyword">return</span> eventEnd &gt;= <span class="keyword">new</span> <span class="title class_">Date</span>(info.<span class="property">start</span>).<span class="title function_">getTime</span>() &amp;&amp; eventStart &lt;= <span class="keyword">new</span> <span class="title class_">Date</span>(info.<span class="property">end</span>).<span class="title function_">getTime</span>();</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 返回过滤后的事件</span></span><br><span class="line">            <span class="title function_">successCallback</span>(filteredEvents);</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="Popper"><a href="#Popper" class="headerlink" title="Popper"></a>Popper</h1><p>鼠标进入时事件详情弹窗</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">eventDidMount</span>: <span class="keyword">function</span> (<span class="params">info</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> eventElement = info.<span class="property">el</span>;</span><br><span class="line">            <span class="keyword">const</span> title = info.<span class="property">event</span>.<span class="property">title</span>;  <span class="comment">// 获取事件标题</span></span><br><span class="line">            <span class="keyword">const</span> description = info.<span class="property">event</span>.<span class="property">extendedProps</span>.<span class="property">description</span> || <span class="string">&#x27;&#x27;</span>;  <span class="comment">// 获取事件描述，如果没有描述则为空字符串  自定义属性</span></span><br><span class="line">            <span class="comment">// 创建 Tooltip 元素</span></span><br><span class="line">            <span class="keyword">const</span> tooltip = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">            tooltip.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;tooltip&#x27;</span>);</span><br><span class="line">            <span class="comment">// 设置 Tooltip 内容：标题在第一行，描述在第二行（如果有描述）</span></span><br><span class="line">            tooltip.<span class="property">innerHTML</span> = <span class="string">`&lt;strong&gt;标题:<span class="subst">$&#123;title&#125;</span>&lt;/strong&gt;&lt;br&gt;描述：<span class="subst">$&#123;description ? description : <span class="string">&#x27;null&#x27;</span>&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置 Tooltip 样式</span></span><br><span class="line">            tooltip.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;absolute&#x27;</span>;</span><br><span class="line">            tooltip.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;black&#x27;</span>;  <span class="comment">// 黑色背景</span></span><br><span class="line">            tooltip.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;white&#x27;</span>;  <span class="comment">// 白色字体</span></span><br><span class="line">            tooltip.<span class="property">style</span>.<span class="property">border</span> = <span class="string">&#x27;1px solid white&#x27;</span>;  <span class="comment">// 白色边框</span></span><br><span class="line">            tooltip.<span class="property">style</span>.<span class="property">padding</span> = <span class="string">&#x27;5px 10px&#x27;</span>;  <span class="comment">// 内边距</span></span><br><span class="line">            tooltip.<span class="property">style</span>.<span class="property">borderRadius</span> = <span class="string">&#x27;4px&#x27;</span>;  <span class="comment">// 边角圆润</span></span><br><span class="line">            tooltip.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">&#x27;12px&#x27;</span>;  <span class="comment">// 字体大小</span></span><br><span class="line"></span><br><span class="line">            tooltip.<span class="property">style</span>.<span class="property">maxWidth</span> = <span class="string">&#x27;500px&#x27;</span>;  <span class="comment">// 设置最大宽度</span></span><br><span class="line">            tooltip.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;auto&#x27;</span>;      <span class="comment">// 宽度自适应内容</span></span><br><span class="line">            tooltip.<span class="property">style</span>.<span class="property">whiteSpace</span> = <span class="string">&#x27;normal&#x27;</span>;  <span class="comment">// 允许文本换行</span></span><br><span class="line">            tooltip.<span class="property">style</span>.<span class="property">wordBreak</span> = <span class="string">&#x27;break-word&#x27;</span>; <span class="comment">// 防止文本溢出</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 确保 Tooltip 在内容过长时能够滚动显示</span></span><br><span class="line">            <span class="comment">//  tooltip.style.maxWidth = &#x27;1000px&#x27;;</span></span><br><span class="line">            <span class="comment">// tooltip.style.overflow = &#x27;auto&#x27;; </span></span><br><span class="line"></span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(tooltip);  <span class="comment">// 将 tooltip 移动到 body 里 calendarEl</span></span><br><span class="line">            <span class="comment">// 使用 Popper.js 来定位 Tooltip</span></span><br><span class="line">            <span class="keyword">const</span> popperInstance = <span class="title class_">Popper</span>.<span class="title function_">createPopper</span>(eventElement, tooltip, &#123;</span><br><span class="line">                <span class="attr">placement</span>: <span class="string">&#x27;top&#x27;</span>,  <span class="comment">// Tooltip 显示在事件上方</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Tooltip 初始为不可见，鼠标悬停时显示</span></span><br><span class="line">            tooltip.<span class="property">style</span>.<span class="property">visibility</span> = <span class="string">&#x27;hidden&#x27;</span>;</span><br><span class="line">            eventElement.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                tooltip.<span class="property">style</span>.<span class="property">visibility</span> = <span class="string">&#x27;visible&#x27;</span>;  <span class="comment">// 鼠标悬停时显示</span></span><br><span class="line">                tooltip.<span class="property">style</span>.<span class="property">zIndex</span> = <span class="number">9999</span>;  <span class="comment">// 显示时将 z-index 提升 ,至于最顶层，防止被遮挡</span></span><br><span class="line">                popperInstance.<span class="title function_">update</span>();  <span class="comment">// 强制更新位置</span></span><br><span class="line">            &#125;);</span><br><span class="line">            eventElement.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                tooltip.<span class="property">style</span>.<span class="property">visibility</span> = <span class="string">&#x27;hidden&#x27;</span>;  <span class="comment">// 鼠标离开时隐藏</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用 MutationObserver 监听弹窗的显示</span></span><br><span class="line">            <span class="comment">//由于 FullCalendar 的弹窗是通过动态加载的，你可能需要监听弹窗的显示事件，然后再修改其样式。你可以使用 MutationObserver 来监听 DOM 变动，确保弹窗被渲染出来后再进行修改。</span></span><br><span class="line">            <span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(<span class="keyword">function</span> (<span class="params">mutationsList, observer</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">const</span> mutation <span class="keyword">of</span> mutationsList) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mutation.<span class="property">type</span> === <span class="string">&#x27;childList&#x27;</span> &amp;&amp; mutation.<span class="property">addedNodes</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">const</span> popover = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.fc-popover&#x27;</span>);</span><br><span class="line">                        <span class="keyword">if</span> (popover) &#123;</span><br><span class="line">                            popover.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;#d3d3d3&#x27;</span>;</span><br><span class="line">                            popover.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;#333&#x27;</span>;</span><br><span class="line">                            popover.<span class="property">style</span>.<span class="property">borderRadius</span> = <span class="string">&#x27;8px&#x27;</span>;</span><br><span class="line">                            popover.<span class="property">style</span>.<span class="property">maxWidth</span> = <span class="string">&#x27;500px&#x27;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">const</span> popoverBody = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.fc-popover-body&#x27;</span>);</span><br><span class="line">                        <span class="keyword">if</span> (popoverBody) &#123;</span><br><span class="line">                            popoverBody.<span class="property">style</span>.<span class="property">padding</span> = <span class="string">&#x27;0px 10px 10px 10px&#x27;</span>; <span class="comment">// 设置新的 padding 值</span></span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.fc-more-popover-misc br&#x27;</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">br</span>) =&gt;</span> &#123;</span><br><span class="line">                            br.<span class="title function_">remove</span>(); <span class="comment">// 移除多余的换行符</span></span><br><span class="line">                        &#125;);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 获取 fc-popover-header  元素</span></span><br><span class="line">                        <span class="keyword">var</span> morePopover = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.fc-popover-header&#x27;</span>);</span><br><span class="line">                        <span class="comment">// 检查元素是否存在</span></span><br><span class="line">                        <span class="keyword">if</span> (morePopover) &#123;</span><br><span class="line">                            <span class="comment">// 设置高度和溢出属性</span></span><br><span class="line">                            morePopover.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&#x27;28px&#x27;</span>; <span class="comment">// 你可以根据需要调整高度</span></span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        observer.<span class="title function_">disconnect</span>();  <span class="comment">// 一旦修改了样式，停止监听</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 配置观察选项</span></span><br><span class="line">            observer.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="property">body</span>, &#123; <span class="attr">childList</span>: <span class="literal">true</span>, <span class="attr">subtree</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
</search>
